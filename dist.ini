name    = Test-WWW-Selenium
author  = Maintained by: Matt Phillips <mattp@cpan.org>, Luke Closs <lukec@cpan.org>
author  = Originally by Mattia Barbon <mbarbon@cpan.org>
abstract = Perl Client for the Selenium Remote Control test tool
;license = Apache_2_0
copyright_holder = ThoughtWorks, Inc
copyright_year = 2006

; version provider
[Git::NextVersion]  ; get version from last release tag
version_regexp = ^(.+)$
first_version = 1.31

; choose files to include
[GatherDir]         ; everything under top dir
[PruneCruft]        ; default stuff to skip
[ManifestSkip]      ; if -f MANIFEST.SKIP, skip those, too

; file modifications
[PkgVersion]        ; add $VERSION = ... to all files
[PodWeaver]         ; generate Pod

; generated files
[ReadmeFromPod]     ; from Pod (runs after PodWeaver)

; t tests
[Test::Compile]      ; make sure .pm files all compile
fake_home = 1       ; fakes $ENV{HOME} just in case

; xt tests
[MetaTests]         ; xt/release/meta-yaml.t
[PodSyntaxTests]    ; xt/release/pod-syntax.t
[PodCoverageTests]  ; xt/release/pod-coverage.t
[Test::Portability]  ; xt/release/portability.t (of file name)
[HasVersionTests]   ; xt/release/has-version.t

; metadata
[AutoPrereqs]       ; find prereqs from code
skip = Devel::REPL
[MinimumPerl]       ; determine minimum perl version

[Repository]        ; set 'repository' in META
git_remote = origin ;   - remote to choose
github_http = 0     ;   - for github, use git:// not http://

; overrides [Repository] if repository is on github
[GithubMeta]
remote = origin     ; better than [Repository]; sets homepage, too

[MetaNoIndex]       ; sets 'no_index' in META
directory = t
directory = xt
directory = examples

[Bugtracker]        ; defaults to RT

[MetaProvides::Package] ; add 'provides' to META files
meta_noindex = 1        ; respect prior no_index directives

[MetaYAML]          ; generate META.yml (v1.4)
[MetaJSON]          ; generate META.json (v2)

; build system
[ExecDir]           ; include 'bin/*' as executables
[ShareDir]          ; include 'share/' for File::ShareDir
[MakeMaker]         ; create Makefile.PL

; manifest (after all generated files)
[Manifest]          ; create MANIFEST

; before release
;[Git::Check]        ; ensure all files checked in
[CheckPrereqsIndexed]    ; ensure prereqs are on CPAN
[CheckChangesHasContent] ; ensure Changes has been updated
[CheckExtraTests]   ; ensure xt/ tests pass
[TestRelease]       ; ensure t/ tests pass
[ConfirmRelease]    ; confirm before upload

; releaser
[UploadToCPAN]      ; uploads to CPAN

; after release
;[Git::Commit / Commit_Dirty_Files] ; commit Changes (as released)

[Git::Tag]          ; tag repo with custom tag
tag_format = %v

; NextRelease acts *during* pre-release to write $VERSION and
; timestamp to Changes and  *after* release to add a new {{$NEXT}}
; section, so to act at the right time after release, it must actually
; come after Commit_Dirty_Files but before Commit_Changes in the
; dist.ini.  It will still act during pre-release as usual

;[NextRelease]
;format = %v - %{eee MMM d h:m:s z yyyy}d

;[Git::Commit / Commit_Changes] ; commit Changes (for new dev)
[Git::Push]         ; push repo to remote
push_to = origin
